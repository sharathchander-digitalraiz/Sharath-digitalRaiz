An arrow function doesnâ€™t have its own bindings with this or super.
An Arrow function should not be used as methods.
An arrow function can not be used as constructors.
An arrow function can not use yield within its body.
Arrow function cannot be suitable for call apply and bind methods.

==== For Schemas if its holding array of objects
    //req.body.drawing_issued_to[0].dep //fist object
    //req.body.drawing_issued_to[0].name //second object
    //req.body.drawing_issued_to[0].image //third object

====
On Logout from the Client Side, the easiest way is to remove the token from the storage of browser.

But, What if you want to destroy the token on the Node server -

The problem with JWT package is that it doesn't provide any method or way to destroy the token.

So in order to destroy the token on the serverside you may use jwt-redis package instead of JWT

This library (jwt-redis) completely repeats the entire functionality of the library jsonwebtoken, with one important addition. Jwt-redis allows you to store the token label in redis to verify validity. The absence of a token label in redis makes the token not valid. To destroy the token in jwt-redis, there is a destroy method

it works in this way :

1) Install jwt-redis from npm

2) To Create -

var redis = require('redis');
var JWTR =  require('jwt-redis').default;
var redisClient = redis.createClient();
var jwtr = new JWTR(redisClient);

jwtr.sign(payload, secret)
    .then((token)=>{
            // your code
    })
    .catch((error)=>{
            // error handling
    });
3) To verify -

jwtr.verify(token, secret);
4) To Destroy -

jwtr.destroy(token)
Note : you can provide expiresIn during signin of token in the same as it is provided in JWT.